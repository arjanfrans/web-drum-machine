{"version":3,"sources":["ui/audio/track/VerticalTrackControl.module.css","ui/component/base/slider/RangeSlider.module.css","ui/audio/TransportControlView.module.css","ui/audio/BusTrackView.module.css","ui/component/PanningSlider.module.css","ui/component/VerticalVolumeSlider.module.css","ui/audio/track/sends/SendControl.module.css","ui/component/VolumeSlider.module.css","ui/audio/sequencer/SequencerCell.module.css","ui/audio/track/control-tabs/ControlTab.module.css","ui/audio/sequencer/PatternTrackView.module.css","ui/component/inputs.module.css","ui/audio/track/TrackLabel.module.css","ui/audio/sequencer/SequencerView.module.css","ui/audio/Mixer.module.css","ui/component/ToggleButton.module.css","util/console.ts","audio/transport/events/TransportPositionUpdatedEvent.ts","events/EventEmitter.ts","audio/transport/events/StopTransportEvent.ts","audio/transport/events/StartTransportEvent.ts","audio/transport/events/PauseTransportEvent.ts","audio/transport/events/UpdateBpmTransportEvent.ts","audio/transport/TransportEmitter.ts","audio/transport/TransportStatusEnum.ts","audio/transport/events/TransportStatusUpdatedEvent.ts","audio/transport/Transport.ts","audio/EffectsRack.ts","audio/track/events/UpdateChannelVolumeEvent.ts","audio/track/events/UpdatePanningVolumeEvent.ts","audio/track/events/SoloChannelEvent.ts","audio/track/events/MuteChannelEvent.ts","audio/bus/BusEmitter.ts","audio/track/events/TrackOutputVolumeUpdatedEvent.ts","audio/Settings.ts","audio/bus/Bus.ts","audio/bus/BusFactory.ts","audio/track/events/UpdateSendVolumeEvent.ts","audio/track/events/EnableTrackEffectEvent.ts","audio/track/events/EnableSendEvent.ts","audio/track/events/DisableSendEvent.ts","audio/track/TrackEmitter.ts","audio/track/Send.ts","audio/track/Track.ts","audio/track/TrackFactory.ts","audio/events/MasterOutputVolumeUpdatedEvent.ts","audio/track/MasterTrack.ts","util/ArrayHelper.ts","audio/sequencer/events/UpdateSequencerStepsEvent.ts","audio/sequencer/events/SetPatternCellEvent.ts","audio/sequencer/events/SequencerStepsUpdatedEvent.ts","audio/sequencer/SequencerEmitter.ts","ui/audio/meters/canvas/MeterCanvas.ts","audio/sequencer/PatternTrack.ts","audio/sequencer/Pattern.ts","audio/sequencer/Sequencer.ts","audio/AudioEngine.ts","config.ts","ui/component/buttons.tsx","ui/component/inputs.tsx","ui/component/Canvas.tsx","ui/hooks/useCanvas.tsx","ui/audio/meters/Meter.tsx","ui/audio/TransportControlView.tsx","ui/audio/sequencer/SequencerCell.tsx","ui/audio/track/TrackLabel.tsx","ui/audio/sequencer/PatternTrackView.tsx","ui/audio/sequencer/SequencerView.tsx","ui/audio/TransportView.tsx","ui/component/base/slider/HorizontalRangeSlider.tsx","ui/component/PanningSlider.tsx","ui/component/ToggleButton.tsx","ui/component/base/slider/VerticalRangeSlider.tsx","ui/component/VerticalVolumeSlider.tsx","ui/audio/BusTrackView.tsx","ui/audio/track/control-tabs/EffectsTab.tsx","ui/component/VolumeSlider.tsx","ui/audio/track/sends/SendControl.tsx","ui/audio/track/control-tabs/SendsTab.tsx","ui/audio/track/control-tabs/ControlTab.tsx","ui/Keyboard.ts","ui/audio/track/VerticalTrackControl.tsx","ui/audio/Mixer.tsx","ui/DrumMachine.tsx","ui/Footer.tsx","index.tsx"],"names":["module","exports","noop","console","log","debug","TransportPositionUpdatedEvent","transportPosition","Name","EventEmitter","emitter","BaseEventEmitter","event","listener","this","on","emit","constructor","off","StopTransportEvent","StartTransportEvent","PauseTransportEvent","UpdateBpmTransportEvent","bpm","TransportStatusEnum","TransportEmitter","transport","stop","start","pause","TransportStatusUpdatedEvent","status","Transport","transportStatus","Stopped","Tone","loopStart","loop","Started","Paused","time","index","sequencer","value","loopEnd","Math","round","EffectsRack","inputNode","outputNode","connections","Map","effects","set","name","node","output","enabled","input","effect","get","connection","inputConnection","findNextInputConnection","outputConnection","findNextOutputConnection","disconnect","connect","effectConnection","Error","UpdateChannelVolumeEvent","volume","UpdateChannelPanningEvent","pan","SoloChannelEvent","solo","MuteChannelEvent","mute","BusEmitter","bus","channel","TrackOutputVolumeUpdatedEvent","leftVolume","rightVolume","Settings","meterSmoothing","offlineBufferLength","drawInterval","Bus","id","meter","effectsRack","receive","toDestination","channels","smoothing","context","destination","getValue","Array","isArray","BusFactory","reverb","wet","preDelay","add","chorus","frequency","delayTime","depth","delay","UpdateSendVolumeEvent","EnableTrackEffectEvent","enable","EnableSendEvent","DisableSendEvent","TrackEmitter","track","enableEffect","disableEffect","getSend","disable","Send","fromChannel","toBus","Track","sample","buses","player","sends","busName","send","getCurrentPattern","isCellActive","values","TrackFactory","autoWah","spread","feedback","bitCrusher","bits","distortion","addSend","MasterOutputVolumeUpdatedEvent","MasterTrack","previousValues","Number","NEGATIVE_INFINITY","shouldDraw","ArrayHelper","length","result","i","push","array","blankArray","originIndex","map","UpdateSequencerStepsEvent","steps","SetPatternCellEvent","patternIndex","cell","SequencerStepsUpdatedEvent","MeterCanvasDirection","SequencerEmitter","setCell","PatternTrack","data","_steps","clear","indexes","stretch","slice","Pattern","tracks","patternTrack","getSequence","Sequencer","options","patterns","onChangeSteps","_subdivision","subdivision","preset","pattern","entries","cellIndex","getPattern","AudioEngine","config","masterTrack","drawSequenceLoop","sequenceLoop","sequencerPreset","trackData","v","loadPreset","createBuses","createTracks","startSequenceLoop","startSequenceDrawLoop","startDrawLoop","setOnChangeSteps","startAgain","dispose","createChorusBus","createReverbBus","createDelayBus","createTrack","schedule","getDraws","draw","getSequenceDraws","sequenceDraw","getSequenceUpdates","sequenceUpdate","shouldUpdate","CONFIG","PauseButton","props","PlayButton","StopButton","BpmInput","className","styles","container","title","min","max","type","Canvas","rest","canvasRef","useRef","useEffect","current","getContext","animationFrameId","frameCount","render","window","requestAnimationFrame","cancelAnimationFrame","useCanvas","ref","MeterCanvas","redBoxIndex","yellowBoxIndex","boxHeight","boxWidth","boxSpacingX","boxSpacingY","channelWidth","channelHeight","nextValues","currentValues","direction","maxValue","minValue","width","height","boxes","boxSpacing","jitter","redThreshold","yellowThreshold","defaultValues","normalizeValue","ceil","MAX","isBoxOn","colors","redOn","redOff","yellowOn","yellowOff","greenOn","greenOff","MIN","amount","random","x","y","abs","beginPath","horizontal","rect","fillStyle","getBoxColor","fill","translate","nextValue","applyJitter","vertical","canvas","currentValue","undefined","computeValue","save","restore","drawBox","Meter","nextProps","nextState","nextContext","style","onUpdate","styleHorizontal","styleVertical","mergedStyle","React","Component","TransportControlView","meterListener","updateValue","state","enableStart","enablePause","enableStop","setState","parseInt","currentTarget","item","disabled","onClick","handleStartClick","handlePauseClick","handleStopClick","display","defaultValue","onChange","handleBpmChange","bind","onBlur","commitBpmChange","onMouseUp","updateSteps","key","SequencerCell","isActive","onToggle","activeCell","inactiveCell","highlight","currentNote","join","TrackLabel","PatternTrackView","cells","sequence","cellValue","highlightIndex","SequencerView","currentPattern","forceUpdate","patternTrackElements","TransportView","componentCount","HorizontalRangeSlider","step","datalist","list","horizontalSlider","slider","parseFloat","label","PanningSlider","labels","bold","ToggleButton","activeColor","backgroundColor","VerticalRangeSlider","verticalContainer","verticalSlider","VerticalVolumeSlider","colorRed","BusTrackView","toggleContainer","EffectsTab","effectElements","Object","VolumeSlider","SendControl","isEnabled","sendLabel","enableButton","disableSend","enableSend","volumeSlider","updateVolume","SendsTab","sendElements","sendName","sendValue","ControlTab","updatePanning","soloChannel","muteChannel","Keyboard","shiftDown","shiftKey","addEventListener","onKeyUp","preventDefault","onKeyDown","VerticalTrackControl","activeTab","TABS","tab","tabButton","isShiftDown","updateActiveTab","changeTab","tabs","renderTabButton","Mixer","busTracks","DrumMachine","sendBuses","engine","keys","audioEngine","Footer","currentYear","Date","getFullYear","copyrightYear","target","rel","href","process","createEngine","a","init","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b6b3e5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"VerticalTrackControl_container__11Y4f\",\"tabs\":\"VerticalTrackControl_tabs__2YEAw\",\"tabButton\":\"VerticalTrackControl_tabButton__1Zeez\",\"activeTab\":\"VerticalTrackControl_activeTab__3j1-U\",\"tab\":\"VerticalTrackControl_tab__2A7ix\",\"name\":\"VerticalTrackControl_name__jAvo_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"horizontalSlider\":\"RangeSlider_horizontalSlider__39k_y\",\"verticalContainer\":\"RangeSlider_verticalContainer__2XpP0\",\"verticalSlider\":\"RangeSlider_verticalSlider__1J7LI\",\"slider\":\"RangeSlider_slider__1vR_8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TransportControlView_container__2EgBe\",\"item\":\"TransportControlView_item__3CaJI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BusTrackView_container__31JTK\",\"meter\":\"BusTrackView_meter__2S2U-\",\"name\":\"BusTrackView_name__1XK6V\",\"volume\":\"BusTrackView_volume__3iKTR\",\"toggleContainer\":\"BusTrackView_toggleContainer__2gEdo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PanningSlider_container__11W5C\",\"labels\":\"PanningSlider_labels__17XCa\",\"bold\":\"PanningSlider_bold__32uS3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"VerticalVolumeSlider_container__2fXna\",\"label\":\"VerticalVolumeSlider_label__2ch9A\",\"colorRed\":\"VerticalVolumeSlider_colorRed__3IAad\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SendControl_container__1FZOB\",\"enableButton\":\"SendControl_enableButton__29reU\",\"sendLabel\":\"SendControl_sendLabel__1LiUW\",\"volumeSlider\":\"SendControl_volumeSlider__3HUfA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"VolumeSlider_container__2Ql4D\",\"label\":\"VolumeSlider_label__2jkQY\",\"labelVertical\":\"VolumeSlider_labelVertical__3XXkK\",\"colorRed\":\"VolumeSlider_colorRed__1x-BT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeCell\":\"SequencerCell_activeCell__3fDoB\",\"inactiveCell\":\"SequencerCell_inactiveCell__rHREt\",\"currentNote\":\"SequencerCell_currentNote__2kFmD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"meter\":\"ControlTab_meter__ntcOl\",\"volume\":\"ControlTab_volume__2MgnM\",\"toggleContainer\":\"ControlTab_toggleContainer__1Ys4b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PatternTrackView_container__2lUZE\",\"cells\":\"PatternTrackView_cells__qrnui\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"inputs_container__1term\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TrackLabel_container__14nkA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SequencerView_container__1f-Ll\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Mixer_container__7-8kN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ToggleButton_container__2vqXn\"};","/**\n * Import this file before everything to disable all \"log\" and \"debug\" console logs in the production build.\n */\nif (process.env.NODE_ENV === \"production\") {\n    const noop = () => undefined\n\n    console.log = noop\n    console.debug = noop\n}\n\nexport const log = console.log\n","export class TransportPositionUpdatedEvent {\n    public static Name: string = \"TransportPositionUpdatedEvent\"\n\n    constructor(public readonly transportPosition: number) {}\n}\n","import { EventEmitter as BaseEventEmitter } from \"events\"\n\nexport class EventEmitter {\n    private emitter = new BaseEventEmitter()\n\n    public on(event: any, listener: (...args: any[]) => void): this {\n        this.emitter.on(event.Name, listener)\n\n        return this\n    }\n\n    public emit(event: any): void {\n        console.debug(event)\n        this.emitter.emit(event.constructor.Name, event)\n    }\n\n    public off(event: any, listener: (...args: any[]) => void): this {\n        this.emitter.off(event.Name, listener)\n\n        return this\n    }\n}\n","export class StopTransportEvent {\n    public static Name: string = \"StopTransportEvent\"\n}\n","export class StartTransportEvent {\n    public static Name: string = \"StartTransportEvent\"\n}\n","export class PauseTransportEvent {\n    public static Name: string = \"PauseTransportEvent\"\n}\n","export class UpdateBpmTransportEvent {\n    public static Name: string = \"UpdateBpmTransportEvent\"\n\n    constructor(public readonly bpm: number) {}\n}\n","import { EventEmitter } from \"../../events/EventEmitter\"\nimport { StopTransportEvent } from \"./events/StopTransportEvent\"\nimport { StartTransportEvent } from \"./events/StartTransportEvent\"\nimport { PauseTransportEvent } from \"./events/PauseTransportEvent\"\nimport { UpdateBpmTransportEvent } from \"./events/UpdateBpmTransportEvent\"\nimport { Transport } from \"./Transport\"\n\nexport class TransportEmitter extends EventEmitter {\n    constructor(private readonly transport: Transport) {\n        super()\n\n        this.on(StopTransportEvent, () => {\n            transport.stop()\n        })\n\n        this.on(StartTransportEvent, () => {\n            transport.start()\n        })\n\n        this.on(PauseTransportEvent, () => {\n            transport.pause()\n        })\n\n        this.on(UpdateBpmTransportEvent, (event: UpdateBpmTransportEvent) => {\n            transport.bpm = event.bpm\n        })\n    }\n}\n","export enum TransportStatusEnum {\n    Started = \"started\",\n    Stopped = \"stopped\",\n    Paused = \"paused\",\n}\n","import { TransportStatusEnum } from \"../TransportStatusEnum\"\n\nexport class TransportStatusUpdatedEvent {\n    public static Name: string = \"TransportStatusUpdatedEvent\"\n\n    constructor(public readonly status: TransportStatusEnum) {}\n}\n","import { TransportPositionUpdatedEvent } from \"./events/TransportPositionUpdatedEvent\"\nimport * as Tone from \"tone\"\nimport { TransportEmitter } from \"./TransportEmitter\"\nimport { TransportStatusEnum } from \"./TransportStatusEnum\"\nimport { SequenceLoopInterface } from \"../SequenceLoopInterface\"\nimport { SequenceDrawLoopInterface } from \"../SequenceDrawLoopInterface\"\nimport { Sequencer } from \"../sequencer/Sequencer\"\nimport { TransportStatusUpdatedEvent } from \"./events/TransportStatusUpdatedEvent\"\n\nexport class Transport implements SequenceLoopInterface, SequenceDrawLoopInterface {\n    public readonly emitter: TransportEmitter\n    private transportPosition: number = 0\n    public transportStatus: TransportStatusEnum = TransportStatusEnum.Stopped\n\n    constructor() {\n        this.emitter = new TransportEmitter(this)\n        Tone.Transport.loopStart = 0\n        Tone.Transport.loop = true\n    }\n\n    set steps(value: number) {\n        const loopEnd = value / 8\n        Tone.Transport.loopEnd = `${loopEnd}m`\n    }\n\n    public get bpm(): number {\n        return Math.round(Tone.Transport.bpm.value)\n    }\n\n    public stop(): void {\n        this.transportStatus = TransportStatusEnum.Stopped\n        this.emitter.emit(new TransportPositionUpdatedEvent(0))\n        this.emitter.emit(new TransportStatusUpdatedEvent(TransportStatusEnum.Stopped))\n\n        Tone.Transport.stop()\n    }\n\n    public start(): void {\n        this.transportStatus = TransportStatusEnum.Started\n        this.emitter.emit(new TransportStatusUpdatedEvent(TransportStatusEnum.Started))\n\n        Tone.Transport.start()\n    }\n\n    public pause(): void {\n        this.transportStatus = TransportStatusEnum.Paused\n        this.emitter.emit(new TransportStatusUpdatedEvent(TransportStatusEnum.Stopped))\n\n        Tone.Transport.pause()\n    }\n\n    public set bpm(value: number) {\n        Tone.Transport.bpm.value = value\n    }\n\n    public sequenceUpdate(time: number, index: number) {\n        this.transportPosition = index\n    }\n\n    public shouldUpdate(index: number, sequencer: Sequencer): boolean {\n        return this.transportStatus === TransportStatusEnum.Started\n    }\n\n    public sequenceDraw(time: number, index: number) {\n        if (this.transportStatus === TransportStatusEnum.Started) {\n            this.emitter.emit(new TransportPositionUpdatedEvent(index))\n        }\n    }\n}\n","import * as Tone from \"tone\"\n\nexport interface EffectConnection {\n    name: string\n    enabled: boolean\n    node: Tone.ToneAudioNode\n    output?: string\n    input?: string\n}\n\nconst INPUT_NAME = \"_input\"\nconst OUTPUT_NAME = \"_output\"\n\nexport class EffectsRack {\n    private readonly connections: Map<string, EffectConnection> = new Map<string, EffectConnection>()\n    public readonly effects: Map<string, EffectConnection> = new Map<string, EffectConnection>()\n\n    constructor(private readonly inputNode: Tone.ToneAudioNode, private readonly outputNode: Tone.ToneAudioNode) {\n        this.connections.set(INPUT_NAME, {\n            name: INPUT_NAME,\n            node: inputNode,\n            output: OUTPUT_NAME,\n            enabled: true,\n        })\n        this.connections.set(OUTPUT_NAME, {\n            name: OUTPUT_NAME,\n            node: outputNode,\n            input: INPUT_NAME,\n            enabled: true,\n        })\n    }\n\n    public isEnabled(name: string): boolean {\n        const effect = this.connections.get(name)\n\n        return effect ? effect.enabled : false\n    }\n\n    public add(name: string, effect: Tone.ToneAudioNode, input?: string) {\n        const connection = { name, node: effect, input, enabled: true }\n        const inputConnection = this.findNextInputConnection(connection)\n        const outputConnection = this.findNextOutputConnection(inputConnection)\n\n        inputConnection.node.disconnect(outputConnection.node)\n        inputConnection.node.connect(effect)\n        effect.connect(outputConnection.node)\n\n        this.connections.set(inputConnection.name, { ...inputConnection, output: connection.name })\n        this.connections.set(outputConnection.name, { ...outputConnection, input: connection.name })\n\n        const effectConnection = { ...connection, input: inputConnection.name, output: outputConnection.name }\n\n        this.connections.set(name, effectConnection)\n        this.effects.set(name, effectConnection)\n    }\n\n    public disableEffect(name: string): void {\n        const connection = this.connections.get(name)\n\n        if (!connection) {\n            throw new Error(\"No connection found.\")\n        }\n\n        if (connection.enabled) {\n            const inputConnection = this.findNextInputConnection(connection)\n            const outputConnection = this.findNextOutputConnection(connection)\n\n            connection.node.disconnect(outputConnection.node)\n            inputConnection.node.disconnect(connection.node)\n            inputConnection.node.connect(outputConnection.node)\n\n            this.connections.set(name, { ...connection, enabled: false })\n            this.effects.set(name, { ...connection, enabled: false })\n        }\n    }\n\n    public enableEffect(name: string): void {\n        const connection = this.connections.get(name)\n\n        if (!connection) {\n            throw new Error(\"No connection found.\")\n        }\n\n        if (!connection.enabled) {\n            const inputConnection = this.findNextInputConnection(connection)\n            const outputConnection = this.findNextOutputConnection(connection)\n\n            inputConnection.node.disconnect(outputConnection.node)\n            inputConnection.node.connect(connection.node)\n            connection.node.connect(outputConnection.node)\n\n            this.connections.set(name, { ...connection, enabled: true })\n            this.effects.set(name, { ...connection, enabled: true })\n        }\n    }\n\n    private findNextInputConnection(connection: EffectConnection): EffectConnection {\n        const inputConnection = this.connections.get(connection.input || INPUT_NAME)\n\n        if (!inputConnection) {\n            throw new Error(\"No input connection found.\")\n        }\n\n        if (!inputConnection.enabled) {\n            return this.findNextInputConnection(inputConnection)\n        }\n\n        return inputConnection\n    }\n\n    private findNextOutputConnection(connection: EffectConnection): EffectConnection {\n        const outputConnection = this.connections.get(connection.output || OUTPUT_NAME)\n\n        if (!outputConnection) {\n            throw new Error(\"No output connection found.\")\n        }\n\n        if (!outputConnection.enabled) {\n            return this.findNextOutputConnection(outputConnection)\n        }\n\n        return outputConnection\n    }\n}\n","export class UpdateChannelVolumeEvent {\n    public static Name: string = \"UpdateChannelVolumeEvent\"\n\n    constructor(public readonly volume: number) {}\n}\n","export class UpdateChannelPanningEvent {\n    public static Name: string = \"UpdateChannelPanningEvent\"\n\n    constructor(public readonly pan: number) {}\n}\n","export class SoloChannelEvent {\n    public static Name: string = \"SoloChannelEvent\"\n\n    constructor(public readonly solo: boolean) {}\n}\n","export class MuteChannelEvent {\n    public static Name: string = \"MuteChannelEvent\"\n\n    constructor(public readonly mute: boolean) {}\n}\n","import { EventEmitter } from \"../../events/EventEmitter\"\nimport { UpdateChannelVolumeEvent } from \"../track/events/UpdateChannelVolumeEvent\"\nimport { UpdateChannelPanningEvent } from \"../track/events/UpdatePanningVolumeEvent\"\nimport { SoloChannelEvent } from \"../track/events/SoloChannelEvent\"\nimport { MuteChannelEvent } from \"../track/events/MuteChannelEvent\"\nimport { Bus } from \"./Bus\"\n\nexport class BusEmitter extends EventEmitter {\n    constructor(private readonly bus: Bus) {\n        super()\n\n        this.on(UpdateChannelVolumeEvent, (event: UpdateChannelVolumeEvent) => {\n            bus.channel.volume.value = event.volume\n        })\n\n        this.on(UpdateChannelPanningEvent, (event: UpdateChannelPanningEvent) => {\n            bus.channel.pan.value = event.pan\n        })\n\n        this.on(SoloChannelEvent, (event: SoloChannelEvent) => {\n            bus.channel.solo = event.solo\n        })\n\n        this.on(MuteChannelEvent, (event: MuteChannelEvent) => {\n            bus.channel.mute = event.mute\n        })\n    }\n}\n","export class TrackOutputVolumeUpdatedEvent {\n    public static Name: string = \"TrackOutputVolumeUpdatedEvent\"\n\n    constructor(public readonly leftVolume: number, public readonly rightVolume: number) {}\n}\n","export abstract class Settings {\n    public static meterSmoothing = 0.3\n    public static offlineBufferLength = 4\n    public static drawInterval = 0.1\n}\n","import * as Tone from \"tone\"\nimport { EffectsRack } from \"../EffectsRack\"\nimport { BusEmitter } from \"./BusEmitter\"\nimport { TrackOutputVolumeUpdatedEvent } from \"../track/events/TrackOutputVolumeUpdatedEvent\"\nimport { Settings } from \"../Settings\"\nimport { DrawLoopInterface } from \"../DrawLoopInterface\"\n\nexport class Bus implements DrawLoopInterface {\n    public readonly channel: Tone.Channel\n    public readonly meter: Tone.Meter\n    public readonly effectsRack: EffectsRack\n    public readonly emitter: BusEmitter\n\n    constructor(public readonly id: string, public name: string) {\n        this.emitter = new BusEmitter(this)\n        this.channel = new Tone.Channel(0, 0)\n        this.channel.receive(id)\n        this.channel.toDestination()\n        this.meter = new Tone.Meter({ channels: 2, smoothing: Settings.meterSmoothing })\n        this.channel.connect(this.meter)\n        this.effectsRack = new EffectsRack(this.channel, this.channel.context.destination)\n    }\n\n    public draw(): void {\n        const value = this.meter.getValue()\n\n        if (Array.isArray(value)) {\n            this.emitter.emit(new TrackOutputVolumeUpdatedEvent(value[0], value[1]))\n        } else {\n            this.emitter.emit(new TrackOutputVolumeUpdatedEvent(value, value))\n        }\n    }\n}\n","import * as Tone from \"tone\"\nimport { Bus } from \"./Bus\"\n\nexport class BusFactory {\n    public static createReverbBus(): Bus {\n        const bus = new Bus(\"reverb\", \"Reverb\")\n\n        const reverb = new Tone.Reverb({\n            wet: 1,\n            preDelay: 0.01,\n        })\n\n        bus.effectsRack.add(\"reverb\", reverb)\n\n        return bus\n    }\n\n    public static createChorusBus(): Bus {\n        const bus = new Bus(\"chorus\", \"Chorus\")\n\n        const chorus = new Tone.Chorus({\n            frequency: 4,\n            delayTime: 2.5,\n            depth: 0.5,\n            wet: 1,\n        })\n\n        bus.effectsRack.add(\"chorus\", chorus)\n\n        return bus\n    }\n\n    public static createDelayBus(): Bus {\n        const bus = new Bus(\"delay\", \"Delay\")\n\n        const delay = new Tone.FeedbackDelay(\"4n\", 0.05)\n\n        bus.effectsRack.add(\"delay\", delay)\n\n        return bus\n    }\n}\n","export class UpdateSendVolumeEvent {\n    public static Name: string = \"UpdateSendVolumeEvent\"\n\n    constructor(public readonly bus: string, public readonly volume: number) {}\n}\n","export class EnableTrackEffectEvent {\n    public static Name: string = \"EnableTrackEffectEvent\"\n\n    constructor(public readonly effect: string, public readonly enable: boolean) {}\n}\n","export class EnableSendEvent {\n    public static Name: string = \"EnableSendEvent\"\n\n    constructor(public readonly bus: string) {}\n}\n","export class DisableSendEvent {\n    public static Name: string = \"DisableSendEvent\"\n\n    constructor(public readonly bus: string) {}\n}\n","import { Track } from \"./Track\"\nimport { EventEmitter } from \"../../events/EventEmitter\"\nimport { UpdateChannelVolumeEvent } from \"./events/UpdateChannelVolumeEvent\"\nimport { UpdateChannelPanningEvent } from \"./events/UpdatePanningVolumeEvent\"\nimport { SoloChannelEvent } from \"./events/SoloChannelEvent\"\nimport { MuteChannelEvent } from \"./events/MuteChannelEvent\"\nimport { UpdateSendVolumeEvent } from \"./events/UpdateSendVolumeEvent\"\nimport { EnableTrackEffectEvent } from \"./events/EnableTrackEffectEvent\"\nimport { EnableSendEvent } from \"./events/EnableSendEvent\"\nimport { DisableSendEvent } from \"./events/DisableSendEvent\"\n\nexport class TrackEmitter extends EventEmitter {\n    constructor(private readonly track: Track) {\n        super()\n\n        this.on(UpdateChannelVolumeEvent, (event: UpdateChannelVolumeEvent) => {\n            track.channel.volume.value = event.volume\n        })\n\n        this.on(UpdateChannelPanningEvent, (event: UpdateChannelPanningEvent) => {\n            track.channel.pan.value = event.pan\n        })\n\n        this.on(SoloChannelEvent, (event: SoloChannelEvent) => {\n            track.solo = event.solo\n        })\n\n        this.on(MuteChannelEvent, (event: MuteChannelEvent) => {\n            track.mute = event.mute\n        })\n\n        this.on(EnableTrackEffectEvent, (event: EnableTrackEffectEvent) => {\n            if (event.enable) {\n                track.effectsRack.enableEffect(event.effect)\n            } else {\n                track.effectsRack.disableEffect(event.effect)\n            }\n        })\n\n        this.on(UpdateSendVolumeEvent, (event: UpdateSendVolumeEvent) => {\n            const send = track.getSend(event.bus)\n\n            send.volume = event.volume\n        })\n\n        this.on(EnableSendEvent, (event: EnableSendEvent) => {\n            const send = track.getSend(event.bus)\n\n            send.enable()\n        })\n\n        this.on(DisableSendEvent, (event: DisableSendEvent) => {\n            const send = track.getSend(event.bus)\n\n            send.disable()\n        })\n    }\n}\n","import * as Tone from \"tone\"\nimport { Bus } from \"../bus/Bus\"\n\nexport class Send {\n    public readonly channel: Tone.Channel\n    private enabled: boolean = false\n\n    constructor(private readonly fromChannel: Tone.Channel, private readonly toBus: Bus) {\n        this.channel = new Tone.Channel({\n            context: fromChannel.context,\n        })\n    }\n\n    set volume(value: number) {\n        value = Math.round(value)\n\n        this.channel.volume.value = value\n    }\n\n    get volume(): number {\n        return this.channel.volume.value\n    }\n\n    public isEnabled(): boolean {\n        return this.enabled\n    }\n\n    public enable(): void {\n        this.enabled = true\n\n        this.fromChannel.connect(this.channel)\n        this.channel.connect(this.toBus.channel)\n    }\n\n    public disable(): void {\n        this.enabled = false\n\n        this.fromChannel.disconnect(this.channel)\n        this.channel.disconnect(this.toBus.channel)\n    }\n}\n","import * as Tone from \"tone\"\nimport { EffectsRack } from \"../EffectsRack\"\nimport { TrackEmitter } from \"./TrackEmitter\"\nimport { Bus } from \"../bus/Bus\"\nimport { Send } from \"./Send\"\nimport { TrackOutputVolumeUpdatedEvent } from \"./events/TrackOutputVolumeUpdatedEvent\"\nimport { Settings } from \"../Settings\"\nimport { DrawLoopInterface } from \"../DrawLoopInterface\"\nimport { SequenceLoopInterface } from \"../SequenceLoopInterface\"\nimport { Sequencer } from \"../sequencer/Sequencer\"\n\nexport class Track implements DrawLoopInterface, SequenceLoopInterface {\n    public readonly player: Tone.Player\n    public readonly emitter: TrackEmitter\n    public readonly channel: Tone.Channel\n    public readonly meter: Tone.Meter\n    public readonly effectsRack: EffectsRack\n    public readonly sends: Map<string, Send> = new Map()\n\n    constructor(\n        public readonly id: string,\n        public name: string,\n        private sample: string,\n        private readonly buses: Map<string, Bus>\n    ) {\n        this.emitter = new TrackEmitter(this)\n        this.player = new Tone.Player(sample)\n        this.channel = new Tone.Channel(-6, 0)\n        this.effectsRack = new EffectsRack(this.player, this.channel)\n        this.meter = new Tone.Meter({ channels: 2, smoothing: Settings.meterSmoothing })\n\n        this.player.connect(this.channel)\n        this.channel.toDestination()\n        this.channel.connect(this.meter)\n    }\n\n    set mute(value: boolean) {\n        this.channel.mute = value\n    }\n\n    set solo(value: boolean) {\n        this.channel.solo = value\n\n        for (const send of this.sends.values()) {\n            send.channel.solo = value\n        }\n    }\n\n    public addSend(busName: string): Send {\n        const bus = this.buses.get(busName)\n\n        if (!bus) {\n            throw new Error(`Bus ${busName} not found.`)\n        }\n\n        const send = new Send(this.channel, bus)\n\n        this.sends.set(busName, send)\n\n        return send\n    }\n\n    public getSend(busName: string): Send {\n        const send = this.sends.get(busName)\n\n        if (!send) {\n            throw new Error(`Send ${busName} is not added to this track.`)\n        }\n\n        return send\n    }\n\n    public sequenceUpdate(time: number, index: number) {\n        this.player.start(time)\n    }\n\n    public shouldUpdate(index: number, sequencer: Sequencer): boolean {\n        const pattern = sequencer.getCurrentPattern()\n\n        return pattern.isCellActive(this.id, index)\n    }\n\n    public draw(): void {\n        const value = this.meter.getValue()\n\n        if (Array.isArray(value)) {\n            this.emitter.emit(new TrackOutputVolumeUpdatedEvent(value[0], value[1]))\n        } else {\n            this.emitter.emit(new TrackOutputVolumeUpdatedEvent(value, value))\n        }\n    }\n}\n","import { Track } from \"./Track\"\nimport * as Tone from \"tone\"\nimport { Bus } from \"../bus/Bus\"\n\nexport class TrackFactory {\n    public static createTrack(id: string, name: string, sample: string, buses: Map<string, Bus>): Track {\n        const track = new Track(id, name, sample, buses)\n\n        const autoWah = new Tone.AutoWah(50, 6, -30)\n\n        const reverb = new Tone.Reverb({\n            wet: 0.5,\n            preDelay: 0.01,\n        })\n        const chorus = new Tone.Chorus({\n            depth: 0.4,\n            spread: 0.4,\n            feedback: 0.4,\n            wet: 0.7,\n        })\n        const bitCrusher = new Tone.BitCrusher({\n            bits: 4,\n        })\n\n        const distortion = new Tone.Distortion({\n            distortion: 0.8,\n        })\n\n        track.addSend(\"reverb\")\n        track.addSend(\"chorus\")\n        track.addSend(\"delay\")\n\n        track.effectsRack.add(\"autoWah\", autoWah)\n        track.effectsRack.add(\"distortion\", distortion)\n        track.effectsRack.add(\"bitCrusher\", bitCrusher)\n        track.effectsRack.add(\"chorus\", chorus)\n        track.effectsRack.add(\"reverb\", reverb, \"chorus\")\n        track.effectsRack.disableEffect(\"autoWah\")\n        track.effectsRack.disableEffect(\"distortion\")\n        track.effectsRack.disableEffect(\"bitCrusher\")\n        track.effectsRack.disableEffect(\"chorus\")\n        track.effectsRack.disableEffect(\"reverb\")\n\n        return track\n    }\n}\n","export class MasterOutputVolumeUpdatedEvent {\n    public static Name: string = \"MasterOutputVolumeUpdatedEvent\"\n\n    constructor(public readonly leftVolume: number, public readonly rightVolume: number) {}\n}\n","import * as Tone from \"tone\"\nimport { MasterOutputVolumeUpdatedEvent } from \"../events/MasterOutputVolumeUpdatedEvent\"\nimport { EventEmitter } from \"../../events/EventEmitter\"\nimport { Settings } from \"../Settings\"\nimport { DrawLoopInterface } from \"../DrawLoopInterface\"\n\nexport class MasterTrack implements DrawLoopInterface {\n    public readonly meter: Tone.Meter = new Tone.Meter({ channels: 2, smoothing: Settings.meterSmoothing })\n    public readonly emitter: EventEmitter = new EventEmitter()\n    private previousValues: number[] = [0, 0]\n\n    constructor() {\n        this.channel.connect(this.meter)\n    }\n\n    get channel() {\n        return Tone.getDestination()\n    }\n\n    private shouldDraw(): boolean {\n        const value = this.meter.getValue()\n\n        if (Array.isArray(value)) {\n            if (value[0] === Number.NEGATIVE_INFINITY && value[1] === Number.NEGATIVE_INFINITY) {\n                return false\n            }\n\n            return value[0] !== this.previousValues[0] || value[1] !== this.previousValues[1]\n        }\n\n        if (value === Number.NEGATIVE_INFINITY) {\n            return false\n        }\n\n        return value !== this.previousValues[0]\n    }\n\n    public draw(): void {\n        const value = this.meter.getValue()\n\n        if (this.shouldDraw()) {\n            if (Array.isArray(value)) {\n                this.emitter.emit(new MasterOutputVolumeUpdatedEvent(value[0], value[1]))\n                this.previousValues = [value[0], value[1]]\n            } else {\n                this.emitter.emit(new MasterOutputVolumeUpdatedEvent(value, value))\n                this.previousValues = [value, value]\n            }\n        }\n    }\n}\n","export class ArrayHelper {\n    public static indexes(length: number): Array<number> {\n        const result = []\n\n        for (let i = 0; i < length; i++) {\n            result.push(i)\n        }\n\n        return result\n    }\n\n    /**\n     * Increase the length of a given array. The content of the given array will be copied until the end\n     * of the new length. Decreasing the length cuts off the array.\n     */\n    public static stretch(array: Array<any>, length: number): Array<any> {\n        const blankArray: Array<any> = new Array(...new Array(length))\n        let originIndex = 0\n\n        return blankArray.map(() => {\n            if (originIndex > array.length - 1) {\n                originIndex = 0\n            }\n\n            const result = array[originIndex]\n\n            originIndex++\n\n            return result\n        })\n    }\n}\n","export class UpdateSequencerStepsEvent {\n    public static Name: string = \"UpdateSequencerStepsEvent\"\n\n    constructor(public readonly steps: number) {}\n}\n","export class SetPatternCellEvent {\n    public static Name: string = \"SetPatternCellEvent\"\n\n    constructor(\n        public readonly patternIndex: number,\n        public readonly track: string,\n        public readonly cell: number,\n        public readonly value: boolean\n    ) {}\n}\n","export class SequencerStepsUpdatedEvent {\n    public static Name: string = \"SequencerStepsUpdatedEvent\"\n\n    constructor(public readonly steps: number) {}\n}\n","import { EventEmitter } from \"../../events/EventEmitter\"\nimport { Sequencer, SequencerStep } from \"./Sequencer\"\nimport { UpdateSequencerStepsEvent } from \"./events/UpdateSequencerStepsEvent\"\nimport { SetPatternCellEvent } from \"./events/SetPatternCellEvent\"\nimport { SequencerStepsUpdatedEvent } from \"./events/SequencerStepsUpdatedEvent\"\n\nexport class SequencerEmitter extends EventEmitter {\n    constructor(private readonly sequencer: Sequencer) {\n        super()\n\n        this.on(UpdateSequencerStepsEvent, (event: UpdateSequencerStepsEvent) => {\n            this.sequencer.steps = event.steps as SequencerStep\n\n            this.emit(new SequencerStepsUpdatedEvent(this.sequencer.steps))\n        })\n\n        this.on(SetPatternCellEvent, (event: SetPatternCellEvent) => {\n            this.sequencer.setCell(event.patternIndex, event.track, event.cell, event.value)\n        })\n    }\n}\n","type MeterCanvasOptions = {\n    maxValue?: number\n    minValue?: number\n    redThreshold: number\n    yellowThreshold: number\n    direction: \"horizontal\" | \"vertical\"\n    channels: number\n    width?: number\n    height?: number\n    boxes?: number\n    boxSpacing?: number\n    jitter?: number\n    values?: number[]\n}\n\nexport enum MeterCanvasDirection {\n    horizontal = \"horizontal\",\n    vertical = \"vertical\",\n}\n\n/**\n * Based on:\n *   - https://github.com/tomnomnom/vumeter\n */\nexport class MeterCanvas {\n    public static readonly colors = {\n        redOn: \"rgba(255,47,30,0.9)\",\n        redOff: \"rgba(64,12,8,0.9)\",\n        yellowOn: \"rgba(255,215,5,0.9)\",\n        yellowOff: \"rgba(64,53,0,0.9)\",\n        greenOn: \"rgba(53,255,30,0.9)\",\n        greenOff: \"rgba(13,64,8,0.9)\",\n    }\n\n    private readonly redBoxIndex: number\n    private readonly yellowBoxIndex: number\n\n    private readonly boxHeight: number\n    private readonly boxWidth: number\n    private readonly boxSpacingX: number\n    private readonly boxSpacingY: number\n    private readonly channelWidth: number\n    private readonly channelHeight: number\n    private nextValues: number[] = []\n    private readonly currentValues: number[] = []\n\n    public readonly direction: string\n    public readonly maxValue: number\n    public readonly minValue: number\n    public readonly width: number\n    public readonly height: number\n    public readonly boxes: number\n    public readonly boxSpacing: number\n    public readonly jitter: number = 0\n\n    private readonly redThreshold: number\n    private readonly yellowThreshold: number\n\n    private static MAX = 1\n    private static MIN = 0\n\n    private readonly channels: number\n\n    constructor(options?: MeterCanvasOptions) {\n        this.maxValue = options?.maxValue || 100\n        this.minValue = options?.minValue || 0\n\n        this.boxes = options?.boxes || 25\n        this.boxSpacing = options?.boxSpacing || 0.2\n        this.jitter = options?.jitter || 0\n        this.redThreshold = options?.redThreshold || 0\n        this.yellowThreshold = options?.yellowThreshold || 0\n        this.channels = options?.channels || 1\n        this.direction = options?.direction || \"horizontal\"\n\n        const defaultValues = []\n\n        for (let i = 0; i < this.channels; i++) {\n            defaultValues[i] = this.normalizeValue(this.minValue)\n        }\n\n        if (options?.values) {\n            for (const [index, value] of options.values.entries()) {\n                defaultValues[index] = this.normalizeValue(value)\n            }\n        }\n\n        this.currentValues = defaultValues\n\n        this.width = options?.width || 20\n        this.height = options?.height || 100\n\n        this.channelWidth = this.width / this.channels\n        this.channelHeight = this.height\n\n        this.boxHeight = this.channelHeight / (this.boxes + (this.boxes + 1) * this.boxSpacing)\n        this.boxSpacingY = this.boxHeight * this.boxSpacing\n\n        this.boxWidth = this.channelWidth - this.boxSpacingY * 2\n        this.boxSpacingX = (this.channelWidth - this.boxWidth) / 2\n\n        this.redBoxIndex = Math.ceil(this.normalizeValue(this.redThreshold) * this.boxes)\n        this.yellowBoxIndex = Math.ceil(this.normalizeValue(this.yellowThreshold) * this.boxes)\n    }\n\n    public set values(values: number[]) {\n        this.nextValues = values.map((v) => Math.round(1000 * this.normalizeValue(v)) / 1000)\n    }\n\n    /**\n     * We need to scale the input value (0-max)\n     * so that it fits into the number of boxes\n     */\n    private isBoxOn(index: number, value: number): boolean {\n        const maxOn = Math.ceil((value / MeterCanvas.MAX) * this.boxes)\n\n        return index <= maxOn\n    }\n\n    private getBoxColor(index: number, value: number): string {\n        if (index > this.redBoxIndex) {\n            return this.isBoxOn(index, value) ? MeterCanvas.colors.redOn : MeterCanvas.colors.redOff\n        }\n\n        if (index > this.yellowBoxIndex) {\n            return this.isBoxOn(index, value) ? MeterCanvas.colors.yellowOn : MeterCanvas.colors.yellowOff\n        }\n\n        return this.isBoxOn(index, value) ? MeterCanvas.colors.greenOn : MeterCanvas.colors.greenOff\n    }\n\n    private applyJitter(value: number): number {\n        if (this.jitter > 0 && value > MeterCanvas.MIN) {\n            let amount = Math.random() * this.jitter * MeterCanvas.MAX\n            if (Math.random() > 0.5) {\n                amount = -amount\n            }\n            value += amount\n        }\n\n        return value\n    }\n\n    private drawBox(context: CanvasRenderingContext2D, value: number, index: number, x: number, y: number): void {\n        index = Math.abs(index - (this.boxes - 1)) + 1\n\n        context.beginPath()\n\n        if (this.direction === MeterCanvasDirection.horizontal) {\n            context.rect(x, y, this.boxHeight, this.boxWidth)\n        } else {\n            context.rect(x, y, this.boxWidth, this.boxHeight)\n        }\n\n        context.fillStyle = this.getBoxColor(index, value)\n        context.fill()\n\n        if (this.direction === MeterCanvasDirection.horizontal) {\n            context.translate(this.boxHeight + this.boxSpacingY, 0)\n        } else {\n            context.translate(0, this.boxHeight + this.boxSpacingY)\n        }\n    }\n\n    private computeValue(value: number, nextValue: number = 0): number {\n        // Gradual approach\n        if (value <= nextValue) {\n            value += (nextValue - value) / 5\n        } else {\n            value -= (value - nextValue) / 5\n        }\n\n        value = this.applyJitter(value)\n\n        if (value < MeterCanvas.MIN) {\n            value = MeterCanvas.MIN\n        }\n\n        return value\n    }\n\n    public draw(context: CanvasRenderingContext2D, frameCount: number): void {\n        if (this.direction === MeterCanvasDirection.vertical) {\n            context.canvas.width = this.width\n            context.canvas.height = this.height\n        } else {\n            context.canvas.width = this.height\n            context.canvas.height = this.width\n        }\n\n        for (let channel = 0; channel < this.channels; channel++) {\n            const currentValue = this.currentValues[channel]\n            const nextValue = this.nextValues[channel]\n\n            if (nextValue === undefined || currentValue !== nextValue) {\n                const value = this.computeValue(currentValue, nextValue)\n\n                context.save()\n                context.beginPath()\n\n                if (this.direction === MeterCanvasDirection.horizontal) {\n                    context.rect(0, channel * this.channelWidth, this.channelHeight, this.channelWidth)\n                } else {\n                    context.rect(channel * this.channelWidth, 0, this.channelWidth, this.channelHeight)\n                }\n\n                context.fillStyle = \"rgb(32,32,32)\"\n                context.fill()\n                context.restore()\n                context.save()\n                context.translate(this.boxSpacingX, this.boxSpacingY)\n\n                for (let i = 0; i < this.boxes; i++) {\n                    if (this.direction === MeterCanvasDirection.horizontal) {\n                        this.drawBox(context, value, this.boxes - i, 0, channel * this.channelWidth)\n                    } else {\n                        this.drawBox(context, value, i, channel * this.channelWidth, 0)\n                    }\n                }\n\n                context.restore()\n\n                this.currentValues[channel] = Math.round(1000 * value) / 1000\n            }\n        }\n    }\n\n    private normalizeValue(value: number): number {\n        return (value - this.minValue) / (this.maxValue - this.minValue)\n    }\n}\n","import { SequencerStep } from \"./Sequencer\"\nimport { ArrayHelper } from \"../../util/ArrayHelper\"\n\nexport class PatternTrack {\n    private data: boolean[] = []\n    private _steps: SequencerStep\n\n    constructor(steps: SequencerStep) {\n        this._steps = steps\n\n        this.clear()\n    }\n\n    public clear(): void {\n        this.data = ArrayHelper.indexes(this._steps).map(() => false)\n    }\n\n    set steps(value: SequencerStep) {\n        if (value > this._steps) {\n            this.data = ArrayHelper.stretch(this.data, value)\n        } else if (value < this._steps) {\n            this.data = this.data.slice(0, value)\n        }\n\n        this._steps = value\n    }\n\n    public setCell(index: number, value: boolean) {\n        this.data[index] = value\n    }\n\n    public getSequence(): boolean[] {\n        return this.data\n    }\n}\n","import { PatternTrack } from \"./PatternTrack\"\nimport { SequencerStep } from \"./Sequencer\"\n\nexport class Pattern {\n    public readonly tracks: Map<string, PatternTrack> = new Map()\n\n    constructor(steps: SequencerStep, tracks: string[]) {\n        for (const track of tracks) {\n            this.tracks.set(track, new PatternTrack(steps))\n        }\n    }\n\n    public clear(): void {\n        for (const patternTrack of this.tracks.values()) {\n            patternTrack.clear()\n        }\n    }\n\n    set steps(value: SequencerStep) {\n        for (const pattern of this.tracks.values()) {\n            pattern.steps = value\n        }\n    }\n\n    public isCellActive(track: string, index: number): boolean {\n        const patternTrack = this.tracks.get(track)\n\n        if (!patternTrack) {\n            throw new Error(`No PatterTrack for \"${track} exists.`)\n        }\n\n        return patternTrack.getSequence()[index]\n    }\n\n    public setCell(track: string, index: number, value: boolean) {\n        const patternTrack = this.tracks.get(track)\n\n        if (!patternTrack) {\n            throw new Error(`No PatterTrack for \"${track} exists.`)\n        }\n\n        patternTrack.setCell(index, value)\n    }\n}\n","import { SequencerEmitter } from \"./SequencerEmitter\"\nimport { Pattern } from \"./Pattern\"\nimport { SequencerPreset } from \"../Config\"\n\nexport type SequencerStep = 4 | 8 | 16 | 32 | 64\n\ntype SequencerOptions = {\n    steps: SequencerStep\n    subdivision: number\n    tracks: string[]\n    onChangeSteps?: (steps: number) => void\n}\n\nexport class Sequencer {\n    public readonly emitter: SequencerEmitter = new SequencerEmitter(this)\n    private patterns: Pattern[] = []\n    private _steps: SequencerStep\n    private onChangeSteps?: (steps: number) => void\n    private _subdivision: string\n\n    constructor(options: SequencerOptions) {\n        this._steps = options.steps || 16\n        this.onChangeSteps = options.onChangeSteps\n        this.patterns.push(new Pattern(this._steps, options.tracks))\n        this._subdivision = `${options.subdivision || 8}n`\n    }\n\n    public loadPreset(preset: SequencerPreset) {\n        this.steps = preset.steps as SequencerStep\n        this._subdivision = `${preset.subdivision}n`\n\n        this.clear()\n        const pattern = this.getCurrentPattern()\n\n        for (const track of preset.tracks) {\n            for (const [index, value] of track.data.entries()) {\n                pattern.setCell(track.id, index, value)\n            }\n        }\n    }\n\n    public clear(): void {\n        this.getCurrentPattern().clear()\n    }\n\n    get subdivision(): string {\n        return this._subdivision\n    }\n\n    public setOnChangeSteps(onChangeSteps: (steps: number) => void): void {\n        this.onChangeSteps = onChangeSteps\n    }\n\n    public getCurrentPattern(): Pattern {\n        // TODO support multiple patterns\n        return this.patterns[0]\n    }\n\n    public getPattern(index: number): Pattern {\n        const pattern = this.patterns[index]\n\n        if (!pattern) {\n            throw new Error(`Pattern with index \"${index}\" not found.`)\n        }\n\n        return pattern\n    }\n\n    get steps(): SequencerStep {\n        return this._steps\n    }\n\n    set steps(value: SequencerStep) {\n        this._steps = value\n\n        for (const pattern of this.patterns) {\n            pattern.steps = value\n        }\n\n        if (this.onChangeSteps) {\n            this.onChangeSteps(value)\n        }\n    }\n\n    public setCell(patternIndex: number, track: string, cellIndex: number, value: boolean) {\n        const pattern = this.getPattern(patternIndex)\n\n        pattern.setCell(track, cellIndex, value)\n    }\n}\n","import { Config } from \"./Config\"\nimport { Track } from \"./track/Track\"\nimport * as Tone from \"tone\"\nimport { Transport } from \"./transport/Transport\"\nimport { Bus } from \"./bus/Bus\"\nimport { BusFactory } from \"./bus/BusFactory\"\nimport { TrackFactory } from \"./track/TrackFactory\"\nimport { MasterTrack } from \"./track/MasterTrack\"\nimport { Settings } from \"./Settings\"\nimport { DrawLoopInterface } from \"./DrawLoopInterface\"\nimport { ArrayHelper } from \"../util/ArrayHelper\"\nimport { SequenceLoopInterface } from \"./SequenceLoopInterface\"\nimport { SequenceDrawLoopInterface } from \"./SequenceDrawLoopInterface\"\nimport { Sequencer, SequencerStep } from \"./sequencer/Sequencer\"\nimport { TransportStatusEnum } from \"./transport/TransportStatusEnum\"\n\nexport class AudioEngine {\n    public readonly masterTrack = new MasterTrack()\n    public readonly tracks: Map<string, Track> = new Map<string, Track>()\n    public readonly buses: Map<string, Bus> = new Map<string, Bus>()\n    public readonly transport: Transport\n    public readonly sequencer: Sequencer\n    private drawSequenceLoop?: Tone.Sequence\n    private sequenceLoop?: Tone.Sequence\n\n    constructor(private readonly config: Config) {\n        this.transport = new Transport()\n\n        const { sequencerPreset } = config\n\n        this.sequencer = new Sequencer({\n            steps: sequencerPreset.steps as SequencerStep,\n            subdivision: sequencerPreset.subdivision,\n            tracks: config.trackData.map((v) => v.id),\n        })\n\n        this.sequencer.loadPreset(sequencerPreset)\n    }\n\n    private getDraws(): Array<DrawLoopInterface> {\n        return [this.masterTrack, ...this.tracks.values(), ...this.buses.values()]\n    }\n\n    private getSequenceUpdates(): Array<SequenceLoopInterface> {\n        return [this.transport, ...this.tracks.values()]\n    }\n\n    private getSequenceDraws(): Array<SequenceDrawLoopInterface> {\n        return [this.transport]\n    }\n\n    public async init() {\n        this.createBuses()\n        this.createTracks()\n\n        await Tone.start()\n        await Tone.loaded()\n\n        this.transport.steps = this.sequencer.steps\n\n        this.startSequenceLoop()\n\n        this.startSequenceDrawLoop()\n        this.startDrawLoop()\n\n        this.sequencer.setOnChangeSteps((steps: number) => {\n            let startAgain = false\n\n            if (this.transport.transportStatus === TransportStatusEnum.Started) {\n                this.transport.stop()\n                startAgain = true\n            } else if (this.transport.transportStatus === TransportStatusEnum.Paused) {\n                this.transport.stop()\n            }\n\n            this.sequenceLoop?.dispose()\n            this.drawSequenceLoop?.dispose()\n\n            this.transport.steps = this.sequencer.steps\n\n            this.startSequenceDrawLoop()\n            this.startSequenceLoop()\n\n            if (startAgain) {\n                this.transport.start()\n            }\n        })\n    }\n\n    private createBuses(): void {\n        this.buses.set(\"chorus\", BusFactory.createChorusBus())\n        this.buses.set(\"reverb\", BusFactory.createReverbBus())\n        this.buses.set(\"delay\", BusFactory.createDelayBus())\n    }\n\n    private createTracks(): void {\n        for (const trackData of this.config.trackData) {\n            const track = TrackFactory.createTrack(trackData.id, trackData.name, trackData.sample, this.buses)\n\n            this.tracks.set(trackData.id, track)\n        }\n    }\n\n    private startDrawLoop(): void {\n        new Tone.Loop((time) => {\n            Tone.Draw.schedule(() => {\n                for (const drawable of this.getDraws()) {\n                    drawable.draw(time)\n                }\n            }, time)\n        }, Settings.drawInterval).start()\n    }\n\n    private startSequenceDrawLoop(): void {\n        this.drawSequenceLoop = new Tone.Sequence(\n            (time, index) => {\n                Tone.Draw.schedule(() => {\n                    for (const sequenceDraw of this.getSequenceDraws()) {\n                        sequenceDraw.sequenceDraw(time, index)\n                    }\n                }, time)\n            },\n            ArrayHelper.indexes(this.sequencer.steps),\n            this.sequencer.subdivision\n        ).start()\n    }\n\n    private startSequenceLoop(): void {\n        this.sequenceLoop = new Tone.Sequence(\n            (time, index) => {\n                for (const sequenceUpdate of this.getSequenceUpdates()) {\n                    if (sequenceUpdate.shouldUpdate(index, this.sequencer)) {\n                        sequenceUpdate.sequenceUpdate(time, index)\n                    }\n                }\n            },\n            ArrayHelper.indexes(this.sequencer.steps),\n            this.sequencer.subdivision\n        ).start()\n    }\n}\n","import { Config } from \"./audio/Config\"\n\nconst SEQUENCER_PRESET_1 = {\n    id: \"preset_1\",\n    steps: 16,\n    subdivision: 8,\n    tracks: [\n        {\n            id: \"kick\",\n            data: [\n                true,\n                false,\n                false,\n                false,\n                true,\n                false,\n                false,\n                false,\n                true,\n                false,\n                false,\n                false,\n                true,\n                false,\n                false,\n                false,\n            ],\n        },\n        {\n            id: \"snare\",\n            data: [\n                false,\n                false,\n                true,\n                false,\n                false,\n                false,\n                true,\n                false,\n                false,\n                false,\n                true,\n                false,\n                false,\n                false,\n                true,\n                false,\n            ],\n        },\n        {\n            id: \"hihat\",\n            data: [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true],\n        },\n        {\n            id: \"shaker\",\n            data: [\n                false,\n                false,\n                true,\n                true,\n                false,\n                false,\n                true,\n                true,\n                false,\n                false,\n                true,\n                true,\n                false,\n                false,\n                true,\n                true,\n            ],\n        },\n    ],\n}\n\nexport const CONFIG: Config = {\n    sequencerPreset: SEQUENCER_PRESET_1,\n    trackData: [\n        {\n            id: \"kick\",\n            name: \"Kick\",\n            sample: \"assets/kick.wav\",\n        },\n        {\n            id: \"snare\",\n            name: \"Snare\",\n            sample: \"assets/snare.wav\",\n        },\n        {\n            id: \"hihat\",\n            name: \"HiHat\",\n            sample: \"assets/hihat.wav\",\n        },\n        {\n            id: \"stick1\",\n            name: \"Stick\",\n            sample: \"assets/stick1.wav\",\n        },\n        {\n            id: \"perc1\",\n            name: \"Perc.\",\n            sample: \"assets/perc1.wav\",\n        },\n        {\n            id: \"clap\",\n            name: \"Clap\",\n            sample: \"assets/clap.wav\",\n        },\n        {\n            id: \"snap\",\n            name: \"Snap\",\n            sample: \"assets/snap.wav\",\n        },\n        {\n            id: \"shaker\",\n            name: \"Shaker\",\n            sample: \"assets/shaker.wav\",\n        },\n    ],\n}\n","import React from \"react\";\n\nexport const PauseButton = (props: React.ButtonHTMLAttributes<HTMLButtonElement>) => (\n    <button {...props}>\n        Pause\n    </button>\n)\n\nexport const PlayButton = (props: React.ButtonHTMLAttributes<HTMLButtonElement>) => (\n    <button {...props}>\n        Play\n    </button>\n)\n\nexport const StopButton = (props: React.ButtonHTMLAttributes<HTMLButtonElement>) => (\n    <button {...props}>\n        Stop\n    </button>\n)\n\n","import React from \"react\";\nimport styles from \"./inputs.module.css\"\n\nexport const BpmInput = (props: React.InputHTMLAttributes<HTMLInputElement>) => (\n    <div className={styles.container}>\n        BPM:\n        <input title=\"BPM\" min={1} max={1600} type=\"number\"\n               {...props}\n        />\n    </div>\n)\n","import React from 'react'\nimport {useCanvas} from \"../hooks/useCanvas\"\n\ntype CanvasProps = {\n    draw: (context: CanvasRenderingContext2D, frameCount: number) => void\n} & React.HTMLAttributes<HTMLCanvasElement>\n\nexport const Canvas = ({ draw, ...rest }: CanvasProps) => {\n    const canvasRef = useCanvas(draw)\n\n    return <canvas ref={canvasRef} {...rest}/>\n}\n","import { useRef, useEffect } from 'react'\n\nexport const useCanvas = (draw: any) => {\n    const canvasRef = useRef(null)\n\n    useEffect(() => {\n        const canvas = canvasRef.current as any;\n        const context = canvas.getContext('2d');\n\n        if (!context == null) throw new Error('Could not get context');\n\n        let frameCount = 0\n        let animationFrameId: number|undefined\n\n        const render = () => {\n            frameCount++\n            draw(context, frameCount)\n            animationFrameId = window.requestAnimationFrame(render)\n        }\n        render()\n\n        return () => {\n            if (animationFrameId) {\n                window.cancelAnimationFrame(animationFrameId)\n            }\n        }\n    }, [draw])\n\n    return canvasRef\n}\n","import React from \"react\";\nimport {Canvas} from \"../../component/Canvas\";\nimport {MeterCanvas, MeterCanvasDirection} from \"./canvas/MeterCanvas\";\n\ntype MeterProps = {\n    onUpdate: (updateValue: (values: number[]) => void) => void\n    direction: 'horizontal' | 'vertical'\n    width: number\n    height: number\n    style: React.CSSProperties\n} & React.HTMLAttributes<HTMLDivElement>\n\nexport class Meter extends React.Component<MeterProps, {}> {\n    private readonly canvas: MeterCanvas\n\n    constructor(props: MeterProps) {\n        super(props);\n\n        this.canvas = new MeterCanvas({\n            width: props.width,\n            height: props.height,\n            minValue: -48,\n            maxValue: 12,\n            redThreshold: 0,\n            yellowThreshold: -6,\n            direction: props.direction,\n            channels: 2\n        });\n    }\n\n    public shouldComponentUpdate(nextProps: Readonly<MeterProps>, nextState: Readonly<{}>, nextContext: any): boolean {\n        return false\n    }\n\n    public render() {\n        const { direction, style, onUpdate, ...rest} = this.props;\n\n        const updateValue = (values: number[]): void => {\n            this.canvas.values = values;\n        }\n\n       onUpdate(updateValue);\n\n        let styleHorizontal = {width: `${this.canvas.height}px`, height: `${this.canvas.width}px`};\n        let styleVertical = {width: `${this.canvas.width}px`, height: `${this.canvas.height}px`};\n\n        const mergedStyle = {\n            ...(direction === MeterCanvasDirection.horizontal ? styleHorizontal : styleVertical),\n            ...style\n        }\n\n        return (\n            <div style={mergedStyle} {...rest}>\n                <Canvas\n                    draw={(context: CanvasRenderingContext2D, frameCount: number) => this.canvas.draw(context, frameCount)}/>\n            </div>\n        )\n    }\n}\n\n","import React from \"react\";\nimport {StartTransportEvent} from \"../../audio/transport/events/StartTransportEvent\";\nimport {StopTransportEvent} from \"../../audio/transport/events/StopTransportEvent\";\nimport {PauseTransportEvent} from \"../../audio/transport/events/PauseTransportEvent\";\nimport {Transport} from \"../../audio/transport/Transport\"\nimport {UpdateBpmTransportEvent} from \"../../audio/transport/events/UpdateBpmTransportEvent\";\nimport styles from \"./TransportControlView.module.css\"\nimport {PauseButton, PlayButton, StopButton} from \"../component/buttons\";\nimport {BpmInput} from \"../component/inputs\";\nimport {Meter} from \"./meters/Meter\";\nimport {MasterOutputVolumeUpdatedEvent} from \"../../audio/events/MasterOutputVolumeUpdatedEvent\";\nimport {MasterTrack} from \"../../audio/track/MasterTrack\";\nimport {Sequencer} from \"../../audio/sequencer/Sequencer\";\nimport {UpdateSequencerStepsEvent} from \"../../audio/sequencer/events/UpdateSequencerStepsEvent\";\n\ninterface TransportControlViewProps {\n    transport: Transport\n    sequencer: Sequencer\n    masterTrack: MasterTrack\n}\n\ninterface TransportControlViewState {\n    enableStart: boolean\n    enablePause: boolean\n    enableStop: boolean\n    bpm: number\n    steps: number\n}\n\nexport class TransportControlView extends React.Component<TransportControlViewProps, TransportControlViewState> {\n    constructor(props: TransportControlViewProps) {\n        super(props);\n\n        this.state = {\n            enableStart: true,\n            enablePause: false,\n            enableStop: false,\n            bpm: props.transport.bpm,\n            steps: props.sequencer.steps\n        }\n    }\n\n    private handleStartClick() {\n        this.setState({\n            enableStart: false,\n            enablePause: true,\n            enableStop: true\n        })\n\n        this.props.transport.emitter.emit(new StartTransportEvent())\n    }\n\n    private handleStopClick() {\n        this.setState({\n            enableStart: true,\n            enablePause: false,\n            enableStop: false\n        })\n\n        this.props.transport.emitter.emit(new StopTransportEvent())\n    }\n\n    private handlePauseClick() {\n        this.setState({\n            enableStart: true,\n            enablePause: false,\n            enableStop: true\n        })\n\n        this.props.transport.emitter.emit(new PauseTransportEvent())\n    }\n\n    private commitBpmChange(event: React.FormEvent<HTMLInputElement>): void {\n        const bpm = Math.max(1, Math.min(Number.parseInt(event.currentTarget.value), 400));\n\n        if (bpm !== this.state.bpm) {\n            this.props.transport.emitter.emit(new UpdateBpmTransportEvent(bpm));\n            this.setState({\n                bpm\n            });\n        }\n    }\n\n    private static handleBpmChange(event: React.FormEvent<HTMLInputElement>): void {\n        const bpm = Math.max(1, Math.min(Number.parseInt(event.currentTarget.value), 400));\n\n        event.currentTarget.value = `${bpm}`;\n    }\n\n    private meterListener = (updateValue: (values: number[]) => void): void => {\n        this.props.masterTrack.emitter.on(MasterOutputVolumeUpdatedEvent, (event: MasterOutputVolumeUpdatedEvent) => {\n            updateValue([event.leftVolume, event.rightVolume])\n        });\n    }\n\n    private updateSteps(steps: number): void {\n        this.props.sequencer.emitter.emit(new UpdateSequencerStepsEvent(steps));\n\n        this.setState({\n            steps\n        })\n    }\n\n    public render() {\n        return (\n            <div className={styles.container}>\n                <div>\n                    <PlayButton className={styles.item} disabled={!this.state.enableStart}\n                                onClick={() => this.handleStartClick()}/>\n                    <PauseButton className={styles.item} disabled={!this.state.enablePause}\n                                 onClick={() => this.handlePauseClick()}/>\n                    <StopButton className={styles.item} disabled={!this.state.enableStop}\n                                onClick={() => this.handleStopClick()}/>\n                </div>\n                <div>\n                    <Meter\n                        className={styles.item}\n                        direction=\"horizontal\"\n                        width={38}\n                        height={200}\n                        style={{display: 'inline-block'}}\n                        onUpdate={this.meterListener}/>\n                </div>\n                <div>\n                    <BpmInput\n                        className={styles.item}\n                        defaultValue={this.state.bpm}\n                        onChange={TransportControlView.handleBpmChange.bind(this)}\n                        onBlur={this.commitBpmChange.bind(this)}\n                        onMouseUp={this.commitBpmChange.bind(this)}\n                    />\n                </div>\n                <div>\n                    Steps:\n                    <select\n                        value={this.state.steps}\n                        onChange={(event) => this.updateSteps(Number.parseInt(event.currentTarget.value))}\n                    >\n                        {[8, 16, 32, 64].map(v => <option key={v} value={v}>{v}</option>)}\n                    </select>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport styles from \"./SequencerCell.module.css\"\n\ninterface SequencerCellProps {\n    isActive: boolean\n    index: number\n    highlight: boolean\n    setCell: (value: boolean) => void\n}\n\nexport class SequencerCell extends React.Component<SequencerCellProps, {}> {\n    private onToggle () {\n        this.props.setCell(!this.props.isActive)\n    }\n\n    public render() {\n        return (\n            <div\n                onClick={this.onToggle.bind(this)}\n                key={this.props.index}\n                className={[this.props.isActive ? styles.activeCell : styles.inactiveCell, this.props.highlight ? styles.currentNote : ''].join(' ')}\n            />\n        )\n    }\n\n}\n","import React from \"react\";\nimport styles from \"./TrackLabel.module.css\"\n\ntype TrackLabelProps = {\n    name: string\n}\n\nexport const TrackLabel = ({name}: TrackLabelProps) => {\n    return (\n        <div className={styles.container}>\n            {name}\n        </div>\n    );\n}\n","import React from \"react\";\nimport {SequencerCell} from \"./SequencerCell\";\nimport styles from \"./PatternTrackView.module.css\";\nimport {TrackLabel} from \"../track/TrackLabel\";\n\ntype PatternTrackViewProps = {\n    name: string\n    sequence: boolean[]\n    highlightIndex: number\n    setCell: (cell: number, value: boolean) => void\n}\n\nexport class PatternTrackView extends React.Component<PatternTrackViewProps, {}> {\n    public render() {\n        const cells = this.props.sequence.map((value, index) => {\n            const setCell = (cellValue: boolean) => this.props.setCell(index, cellValue);\n\n            return (\n                <SequencerCell setCell={setCell} key={index} isActive={value} index={index}\n                               highlight={this.props.highlightIndex === index}/>\n            )\n        })\n\n        return (\n            <div className={styles.container}>\n                <TrackLabel name={this.props.name}/>\n                <div className={styles.cells} style={{'gridTemplateColumns': `repeat(${cells.length}, 1fr)`}}>\n                    {cells}\n                </div>\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport {Sequencer} from \"../../../audio/sequencer/Sequencer\";\nimport {PatternTrackView} from \"./PatternTrackView\";\nimport {Transport} from \"../../../audio/transport/Transport\";\nimport {TransportPositionUpdatedEvent} from \"../../../audio/transport/events/TransportPositionUpdatedEvent\";\nimport {SetPatternCellEvent} from \"../../../audio/sequencer/events/SetPatternCellEvent\";\nimport styles from \"./SequencerView.module.css\"\nimport {SequencerStepsUpdatedEvent} from \"../../../audio/sequencer/events/SequencerStepsUpdatedEvent\";\n\ntype SequencerViewProps = {\n    sequencer: Sequencer\n    transport: Transport\n}\n\ntype SequencerViewState = {\n    currentPattern: number\n    transportPosition: number\n}\n\nexport class SequencerView extends React.Component<SequencerViewProps, SequencerViewState> {\n    constructor(props: SequencerViewProps) {\n        super(props);\n\n        this.state = {\n            currentPattern: 0,\n            transportPosition: 0\n        }\n    }\n\n    componentDidMount() {\n        this.props.transport.emitter.on(TransportPositionUpdatedEvent, (event: TransportPositionUpdatedEvent) => {\n            this.setState({\n                transportPosition: event.transportPosition\n            })\n        })\n\n        this.props.sequencer.emitter.on(SequencerStepsUpdatedEvent, (event: SequencerStepsUpdatedEvent) => {\n            this.forceUpdate()\n        })\n    }\n\n\n    public render() {\n        const pattern = this.props.sequencer.getPattern(this.state.currentPattern);\n        const patternTrackElements = [];\n\n        for (const [track, patternTrack] of pattern.tracks.entries()) {\n            const setCell = (cell: number, value: boolean) => {\n                this.props.sequencer.emitter.emit(new SetPatternCellEvent(this.state.currentPattern, track, cell, value))\n\n                this.forceUpdate()\n            }\n\n            patternTrackElements.push(\n                <PatternTrackView\n                    key={track}\n                    name={track}\n                    setCell={setCell}\n                    sequence={patternTrack.getSequence()}\n                    highlightIndex={this.state.transportPosition}\n                />\n            )\n        }\n\n        return (\n            <div className={styles.container}>\n                {patternTrackElements}\n            </div>\n        )\n    }\n}\n","import React from \"react\";\nimport {TransportControlView} from \"./TransportControlView\";\nimport {TransportPositionUpdatedEvent} from \"../../audio/transport/events/TransportPositionUpdatedEvent\";\nimport {Transport} from \"../../audio/transport/Transport\"\nimport {Track} from \"../../audio/track/Track\";\nimport {MasterTrack} from \"../../audio/track/MasterTrack\";\nimport {Sequencer} from \"../../audio/sequencer/Sequencer\";\nimport {SequencerView} from \"./sequencer/SequencerView\";\n\ninterface TransportViewProps {\n    masterTrack: MasterTrack\n    transport: Transport\n    sequencer: Sequencer\n    tracks: Track[]\n    sendBuses: string[]\n}\n\ninterface TransportViewState {\n    transportPosition: number\n}\n\nexport class TransportView extends React.Component<TransportViewProps, TransportViewState> {\n    constructor(props: TransportViewProps) {\n        super(props);\n\n        this.state = {\n            transportPosition: 0\n        }\n    }\n\n    public componentDidMount() {\n        this.props.transport.emitter.on(TransportPositionUpdatedEvent, (event: TransportPositionUpdatedEvent) => {\n            this.setState({\n                transportPosition: event.transportPosition\n            })\n        })\n    }\n\n    public render() {\n        return (\n            <>\n                <TransportControlView\n                    transport={this.props.transport}\n                    masterTrack={this.props.masterTrack}\n                    sequencer={this.props.sequencer}\n                />\n                <SequencerView sequencer={this.props.sequencer} transport={this.props.transport}/>\n            </>\n        )\n    }\n}\n","import styles from \"./RangeSlider.module.css\";\nimport React from \"react\";\n\ntype HorizontalRangeSliderProps = {\n    min: number\n    max: number\n    step: number\n    value: number\n    onChange: (value: number) => void\n    datalist: { label: string | number, value: string | number }[]\n}\n\nlet componentCount = 0;\n\nexport const HorizontalRangeSlider = ({min, max, step, datalist, value, onChange}: HorizontalRangeSliderProps) => {\n    componentCount += 1;\n\n    const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n        const value = Number.parseFloat(event.currentTarget.value);\n\n        onChange(value);\n    }\n\n    return (\n        <>\n            <input\n                type=\"range\"\n                step={step}\n                min={min}\n                max={max}\n                list={`RangeSlider_${componentCount}`}\n                className={`${styles.horizontalSlider} ${styles.slider}`}\n                defaultValue={value}\n                onChange={handleChange}\n            />\n            <datalist id={`RangeSlider_${componentCount}`}>\n                {datalist.map(({label, value}, index: number) => <option key={index} value={value}>{label}</option>)}\n            </datalist>\n        </>\n    );\n}\n","import styles from \"./PanningSlider.module.css\";\nimport React from \"react\";\nimport {HorizontalRangeSlider} from \"./base/slider/HorizontalRangeSlider\";\n\ntype PanningSliderProps = {\n    value?: number\n    onChange: (value: number) => void\n}\n\nexport const PanningSlider = ({ value = 0, onChange}: PanningSliderProps) => {\n\n    return (\n        <div className={styles.container}>\n            <HorizontalRangeSlider\n                min={-1}\n                max={1}\n                step={0.01}\n                value={value}\n                onChange={onChange}\n                datalist={[{label: 'L', value: -1}, {label: 'C', value: 0}, {label: 'R', value: 1}]}\n            />\n            <div className={styles.labels}>\n                <span className={value === -1 ? styles.bold : ''}>L</span>\n                <span className={value === 0 ? styles.bold : ''}>C</span>\n                <span className={value === 1 ? styles.bold : ''}>R</span>\n            </div>\n        </div>\n    )\n}\n","import React from \"react\";\nimport styles from \"./ToggleButton.module.css\"\n\ninterface ToggleButtonProps {\n    isActive: boolean,\n    onClick: () => void,\n    label: string,\n    activeColor: string\n}\n\nexport const ToggleButton = ({isActive, onClick, label, activeColor, ...props}: ToggleButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>) => (\n    <button\n        className={styles.container}\n        style={{\n            backgroundColor: !isActive ? activeColor : ''\n        }}\n        onClick={onClick}\n        {...props}\n    >\n        {label}\n    </button>\n)\n","import styles from \"./RangeSlider.module.css\";\nimport React from \"react\";\n\ntype VerticalRangeSliderProps = {\n    min: number\n    max: number\n    step: number\n    value: number\n    onChange: (value: number) => void\n    datalist: { label: string | number, value: string | number }[]\n}\n\nlet componentCount = 0;\n\nexport const VerticalRangeSlider = ({min, max, step, datalist, value, onChange}: VerticalRangeSliderProps) => {\n    componentCount += 1;\n\n    const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n        const value = Number.parseFloat(event.currentTarget.value);\n\n        onChange(value);\n    }\n\n    return (\n        <div className={styles.verticalContainer}>\n            <input\n                type=\"range\"\n                step={step}\n                min={min}\n                max={max}\n                list={`VerticalRangeSlider_${componentCount}`}\n                className={`${styles.verticalSlider} ${styles.slider}`}\n                defaultValue={value}\n                onChange={handleChange}\n            />\n            <datalist id={`VerticalRangeSlider_${componentCount}`}>\n                {datalist.map(({label, value}, index: number) => <option key={index} value={value}>{label}</option>)}\n            </datalist>\n        </div>\n    );\n}\n","import styles from \"./VerticalVolumeSlider.module.css\";\nimport React from \"react\";\nimport {VerticalRangeSlider} from \"./base/slider/VerticalRangeSlider\";\n\ntype VerticalVolumeSliderProps = {\n    value?: number\n    onChange: (value: number) => void\n}\n\nexport const VerticalVolumeSlider = ({ value, onChange}: VerticalVolumeSliderProps) => {\n    if (value === undefined) {\n        value = -32\n    }\n\n    value = Math.round(value);\n\n    return (\n        <div className={styles.container}>\n            <VerticalRangeSlider\n                value={value}\n                onChange={onChange}\n                min={-32}\n                max={6}\n                step={1}\n                datalist={[{label: -32, value: -32 }, {label: 0, value: 0}, {label: 6, value: 6}]}\n            />\n            <div className={value <= 0 ? styles.label : `${styles.label} ${styles.colorRed}`}>\n                { value > 0 ? `+${value}` : `${value}` }db\n            </div>\n        </div>\n    )\n}\n","import React from \"react\";\nimport {Bus} from \"../../audio/bus/Bus\";\nimport {UpdateChannelVolumeEvent} from \"../../audio/track/events/UpdateChannelVolumeEvent\";\nimport styles from \"./BusTrackView.module.css\"\nimport {PanningSlider} from \"../component/PanningSlider\";\nimport {UpdateChannelPanningEvent} from \"../../audio/track/events/UpdatePanningVolumeEvent\";\nimport {SoloChannelEvent} from \"../../audio/track/events/SoloChannelEvent\";\nimport {MuteChannelEvent} from \"../../audio/track/events/MuteChannelEvent\";\nimport {ToggleButton} from \"../component/ToggleButton\";\nimport {VerticalVolumeSlider} from \"../component/VerticalVolumeSlider\";\nimport {Meter} from \"./meters/Meter\";\nimport {TrackOutputVolumeUpdatedEvent} from \"../../audio/track/events/TrackOutputVolumeUpdatedEvent\";\n\ninterface BusTrackViewProps {\n    bus: Bus\n}\n\ninterface BusTrackViewState {\n    volume: number\n    pan: number;\n    solo: boolean\n    mute: boolean\n}\n\nexport class BusTrackView extends React.Component<BusTrackViewProps, BusTrackViewState> {\n    constructor(props: BusTrackViewProps) {\n        super(props);\n\n        this.state = {\n            pan: props.bus.channel.pan.value,\n            volume: props.bus.channel.volume.value,\n            solo: props.bus.channel.solo,\n            mute: props.bus.channel.mute,\n        }\n    }\n\n    private meterListener = (updateValue: (values: number[]) => void): void => {\n        this.props.bus.emitter.on(TrackOutputVolumeUpdatedEvent, (event: TrackOutputVolumeUpdatedEvent) => {\n            updateValue([event.leftVolume, event.rightVolume])\n        });\n    }\n\n    public render() {\n        const {bus} = this.props;\n\n        const updatePanning = (value: number) => {\n            if (value !== bus.channel.pan.value) {\n                bus.emitter.emit(new UpdateChannelPanningEvent(value));\n                this.setState({\n                    pan: value\n                })\n            }\n        }\n\n        const soloChannel = () => {\n            bus.emitter.emit(new SoloChannelEvent(!bus.channel.solo));\n            this.setState({\n                solo: !this.state.solo\n            })\n        }\n\n        const muteChannel = () => {\n            bus.emitter.emit(new MuteChannelEvent(!bus.channel.mute));\n\n            this.setState({\n                mute: !this.state.mute\n            });\n        }\n\n        const updateVolume = (value: number) => {\n            if (value !== bus.channel.volume.value) {\n                bus.emitter.emit(new UpdateChannelVolumeEvent(value));\n                this.setState({\n                    volume: value\n                })\n            }\n        }\n\n        return (\n            <div className={styles.container}>\n                <PanningSlider\n                    value={this.state.pan}\n                    onChange={updatePanning}\n                />\n                <div className={styles.meter}>\n                    <Meter\n                        direction=\"vertical\"\n                        width={20}\n                        height={110}\n                        style={{display: 'inline-block'}}\n                        onUpdate={this.meterListener}\n                    />\n                </div>\n                <div className={styles.volume} title=\"Volume\">\n                   <VerticalVolumeSlider onChange={updateVolume} value={this.state.volume} />\n                </div>\n                <div className={styles.toggleContainer}>\n                    <ToggleButton\n                        onClick={soloChannel}\n                        isActive={!this.state.solo}\n                        activeColor={'goldenrod'}\n                        label=\"S\"\n                    />\n                    <ToggleButton\n                        onClick={muteChannel}\n                        isActive={!this.state.mute}\n                        activeColor={'darkred'}\n                        label=\"M\"\n                    />\n                </div>\n                <div className={styles.name}>\n                    {bus.name}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport {Track} from \"../../../../audio/track/Track\";\nimport {ToggleButton} from \"../../../component/ToggleButton\";\nimport {EnableTrackEffectEvent} from \"../../../../audio/track/events/EnableTrackEffectEvent\";\n\ntype EffectsTabProps = {\n    track: Track\n}\n\ntype EffectsTabState = {\n    effects: { [key: string]: boolean}\n}\n\nexport class EffectsTab extends React.Component<EffectsTabProps, EffectsTabState> {\n    constructor(props: EffectsTabProps) {\n        super(props);\n\n        const effects: { [key: string]: boolean } = {};\n\n        for (const connection of props.track.effectsRack.effects.values()) {\n            effects[connection.name] = connection.enabled\n        }\n\n        this.state = {\n            effects\n        }\n    }\n\n    private enableEffect(effect: string, enabled: boolean) {\n        this.props.track.emitter.emit(new EnableTrackEffectEvent(effect, enabled))\n\n        this.setState({\n            effects: {\n                ...this.state.effects,\n                [effect]: enabled\n            }\n        })\n    }\n\n    public render() {\n        const effectElements = [];\n\n        for (const [effect, enabled] of Object.entries(this.state.effects)) {\n\n            effectElements.push(\n                <div key={effect}>\n                    <ToggleButton\n                        onClick={() => this.enableEffect(effect, !enabled)}\n                        isActive={!enabled}\n                        label={effect}\n                        activeColor={'white'}\n                        title={effect}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                {effectElements}\n            </div>\n        );\n    }\n}\n","import styles from \"./VolumeSlider.module.css\";\nimport React from \"react\";\nimport {HorizontalRangeSlider} from \"./base/slider/HorizontalRangeSlider\";\n\ntype VolumeSliderProps = {\n    value?: number\n    onChange: (value: number) => void\n}\n\nexport const VolumeSlider = ({ value, onChange}: VolumeSliderProps) => {\n    if (value === undefined) {\n        value = -32\n    }\n\n    value = Math.round(value);\n\n    return (\n        <div className={styles.container}>\n            <HorizontalRangeSlider\n                value={value}\n                onChange={onChange}\n                min={-32}\n                max={6}\n                step={1}\n                datalist={[{label: -32, value: -32 }, {label: 0, value: 0}, {label: 6, value: 6}]}\n            />\n            <div className={value <= 0 ? styles.label : `${styles.label} ${styles.colorRed}`}>\n                { value > 0 ? `+${value}` : `${value}` }db\n            </div>\n        </div>\n    )\n}\n","import styles from \"./SendControl.module.css\";\nimport {VolumeSlider} from \"../../../component/VolumeSlider\";\nimport React from \"react\";\nimport {Track} from \"../../../../audio/track/Track\";\nimport {UpdateSendVolumeEvent} from \"../../../../audio/track/events/UpdateSendVolumeEvent\";\nimport {Send} from \"../../../../audio/track/Send\";\nimport {ToggleButton} from \"../../../component/ToggleButton\";\nimport {EnableSendEvent} from \"../../../../audio/track/events/EnableSendEvent\";\nimport {DisableSendEvent} from \"../../../../audio/track/events/DisableSendEvent\";\n\ntype SendControlProps = {\n    name: string\n    track: Track\n    send: Send\n}\n\ntype SendControlState = {\n    volume: number\n    enabled: boolean\n}\n\nexport class SendControl extends React.Component<SendControlProps, SendControlState> {\n    constructor(props: SendControlProps) {\n        super(props);\n\n        this.state = {\n            volume: props.send.volume,\n            enabled: props.send.isEnabled(),\n        }\n    }\n\n    private updateVolume(value: number) {\n        this.props.track.emitter.emit(new UpdateSendVolumeEvent(this.props.name, value));\n\n        this.setState({\n            volume: value\n        })\n    }\n\n    private enableSend() {\n        if (!this.state.enabled) {\n            this.props.track.emitter.emit(new EnableSendEvent(this.props.name));\n\n            this.setState({\n                enabled: true\n            })\n        }\n    }\n\n    private disableSend() {\n        if (this.state.enabled) {\n            this.props.track.emitter.emit(new DisableSendEvent(this.props.name));\n\n            this.setState({\n                enabled: false\n            })\n        }\n    }\n\n    public render() {\n        return (\n            <div key={this.props.name} title={`Send: ${this.props.name}`} className={styles.container}>\n                <div className={styles.sendLabel}>\n                    {this.props.name}\n                </div>\n                <div className={styles.enableButton}>\n                    <ToggleButton\n                        isActive={!this.state.enabled}\n                        onClick={() => this.state.enabled ? this.disableSend() : this.enableSend()}\n                        label={!this.state.enabled ? 'Off' : 'On'}\n                        activeColor={'lightcoral'}\n                    />\n                </div>\n                <div className={styles.volumeSlider}>\n                    <VolumeSlider\n                        onChange={this.updateVolume.bind(this)}\n                        value={this.state.volume}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport {Track} from \"../../../../audio/track/Track\";\nimport {SendControl} from \"../sends/SendControl\";\n\ninterface SendsTabsProps {\n    track: Track\n}\n\nexport class SendsTab extends React.Component<SendsTabsProps, {}> {\n    public render() {\n        const sendElements = [];\n\n        for (const [sendName, sendValue] of this.props.track.sends.entries()) {\n            sendElements.push(\n                <SendControl key={sendName} name={sendName} track={this.props.track} send={sendValue}/>\n            )\n        }\n\n        return (\n            <div>\n                {sendElements}\n            </div>\n        );\n    }\n}\n","import styles from \"./ControlTab.module.css\";\nimport {PanningSlider} from \"../../../component/PanningSlider\";\nimport {Meter} from \"../../meters/Meter\";\nimport {VerticalVolumeSlider} from \"../../../component/VerticalVolumeSlider\";\nimport {ToggleButton} from \"../../../component/ToggleButton\";\nimport React from \"react\";\nimport {Track} from \"../../../../audio/track/Track\";\nimport {UpdateChannelPanningEvent} from \"../../../../audio/track/events/UpdatePanningVolumeEvent\";\nimport {SoloChannelEvent} from \"../../../../audio/track/events/SoloChannelEvent\";\nimport {MuteChannelEvent} from \"../../../../audio/track/events/MuteChannelEvent\";\nimport {UpdateChannelVolumeEvent} from \"../../../../audio/track/events/UpdateChannelVolumeEvent\";\nimport {TrackOutputVolumeUpdatedEvent} from \"../../../../audio/track/events/TrackOutputVolumeUpdatedEvent\";\n\ninterface ControlTabProps {\n    track: Track\n}\n\ninterface ControlTabState {\n    volume: number\n    pan: number;\n    solo: boolean\n    mute: boolean\n}\n\nexport class ControlTab extends React.Component<ControlTabProps, ControlTabState>  {\n    constructor(props: ControlTabProps) {\n        super(props);\n\n        this.state = {\n            pan: props.track.channel.pan.value,\n            volume: props.track.channel.volume.value,\n            solo: props.track.channel.solo,\n            mute: props.track.channel.mute,\n        }\n    }\n\n    private updatePanning = (value: number) => {\n        if (value !== this.props.track.channel.pan.value) {\n            this.props.track.emitter.emit(new UpdateChannelPanningEvent(value));\n            this.setState({\n                pan: value\n            })\n        }\n    }\n\n    private soloChannel = () => {\n        this.props.track.emitter.emit(new SoloChannelEvent(!this.props.track.channel.solo));\n        this.setState({\n            solo: !this.state.solo\n        })\n    }\n\n    private muteChannel = () => {\n        this.props.track.emitter.emit(new MuteChannelEvent(!this.props.track.channel.mute));\n\n        this.setState({\n            mute: !this.state.mute\n        });\n    }\n\n    private updateVolume = (value: number) => {\n        if (value !== this.props.track.channel.volume.value) {\n            this.props.track.emitter.emit(new UpdateChannelVolumeEvent(value));\n            this.setState({\n                volume: value\n            })\n        }\n    }\n\n    private meterListener = (updateValue: (values: number[]) => void): void => {\n        this.props.track.emitter.on(TrackOutputVolumeUpdatedEvent, (event: TrackOutputVolumeUpdatedEvent) => {\n            updateValue([event.leftVolume, event.rightVolume])\n        });\n    }\n\n    public render() {\n        return (\n            <>\n                <PanningSlider\n                    value={this.state.pan}\n                    onChange={this.updatePanning}\n                />\n                <div className={styles.meter}>\n                    <Meter\n                        direction=\"vertical\"\n                        width={20}\n                        height={110}\n                        style={{display: 'inline-block'}}\n                        onUpdate={this.meterListener}\n                    />\n                </div>\n                <div className={styles.volume} title=\"Volume\">\n                    <VerticalVolumeSlider onChange={this.updateVolume} value={this.state.volume}/>\n                </div>\n                <div className={styles.toggleContainer}>\n                    <ToggleButton\n                        onClick={this.soloChannel}\n                        isActive={!this.state.solo}\n                        activeColor={'goldenrod'}\n                        label=\"S\"\n                    />\n                    <ToggleButton\n                        onClick={this.muteChannel}\n                        isActive={!this.state.mute}\n                        activeColor={'darkred'}\n                        label=\"M\"\n                    />\n                </div>\n            </>\n        )\n    }\n}\n","class KeyboardInstance {\n    private shiftDown: boolean = false\n\n    public isShiftDown(): boolean {\n        return this.shiftDown\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        this.shiftDown = event.shiftKey\n    }\n\n    public onKeyUp(event: KeyboardEvent): void {\n        this.shiftDown = event.shiftKey\n    }\n}\n\nexport const Keyboard = new KeyboardInstance()\n\nwindow.addEventListener(\n    \"keyup\",\n    (event) => {\n        Keyboard.onKeyUp(event)\n        event.preventDefault()\n    },\n    false\n)\n\nwindow.addEventListener(\n    \"keydown\",\n    (event) => {\n        Keyboard.onKeyDown(event)\n        event.preventDefault()\n    },\n    false\n)\n","import React from \"react\";\nimport styles from \"./VerticalTrackControl.module.css\"\nimport {Track} from \"../../../audio/track/Track\";\nimport {EffectsTab} from \"./control-tabs/EffectsTab\";\nimport {SendsTab} from \"./control-tabs/SendsTab\";\nimport {ControlTab} from \"./control-tabs/ControlTab\";\nimport {Keyboard} from \"../../Keyboard\";\n\ninterface VerticalTrackControlProps {\n    track: Track\n    updateActiveTab: (tab: string) => void\n}\n\ninterface VerticalTrackControlState {\n    activeTab: string\n}\n\nexport class VerticalTrackControl extends React.Component<VerticalTrackControlProps, VerticalTrackControlState> {\n    public static TABS = [\"CTL\", \"EFX\", \"SND\"]\n\n    constructor(props: VerticalTrackControlProps) {\n        super(props);\n\n        this.state = {\n            activeTab: VerticalTrackControl.TABS[0]\n        }\n    }\n\n\n    private changeTab(tab: string): void {\n        this.setState({\n            activeTab: tab\n        })\n    }\n\n    private renderTabButton(name: string)\n    {\n        return (\n            <button\n                className={`${(this.state.activeTab === name ? styles.activeTab : '')} ${styles.tabButton}`}\n                onClick={() => {\n                    if (Keyboard.isShiftDown()) {\n                        this.props.updateActiveTab(name)\n                    } else {\n                        this.changeTab(name)\n                    }\n                }}\n            >\n                {name}\n            </button>\n        )\n    }\n\n    public render() {\n        const {track} = this.props\n        const {activeTab } = this.state\n\n        let tab = null;\n\n        if (activeTab === VerticalTrackControl.TABS[0]) {\n            tab = <div className={styles.tab}><ControlTab track={track}/></div>\n        } else if (activeTab === VerticalTrackControl.TABS[1]) {\n            tab = <div className={styles.tab}><EffectsTab track={track}/></div>\n        } else {\n            tab = <div className={styles.tab}><SendsTab track={track}/></div>\n        }\n\n        return (\n            <div className={styles.container}>\n                <div className={styles.tabs}>\n                    {this.renderTabButton(VerticalTrackControl.TABS[0])}\n                    {this.renderTabButton(VerticalTrackControl.TABS[1])}\n                    {this.renderTabButton(VerticalTrackControl.TABS[2])}\n                </div>\n                <div>\n                    {tab}\n                </div>\n                <div className={styles.name}>\n                    {track.name}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport styles from \"./Mixer.module.css\"\nimport {Bus} from \"../../audio/bus/Bus\";\nimport {BusTrackView} from \"./BusTrackView\";\nimport {AudioEngine} from \"../../audio/AudioEngine\";\nimport {Track} from \"../../audio/track/Track\";\nimport {VerticalTrackControl} from \"./track/VerticalTrackControl\";\n\ninterface MixerViewProps {\n    buses: Bus[]\n    tracks: Track[]\n    audioEngine: AudioEngine\n}\n\nexport class Mixer extends React.Component<MixerViewProps, {}> {\n    private updateActiveTab = (tab: string) => {\n    }\n\n    public render() {\n        const busTracks = this.props.buses.map((bus: Bus) => {\n            return <BusTrackView key={bus.id} bus={bus}/>;\n        });\n\n        const tracks = this.props.tracks.map((track: Track) => {\n            return (\n                <VerticalTrackControl\n                    updateActiveTab={this.updateActiveTab.bind(this)}\n                    key={track.id}\n                    track={track}\n                />\n            );\n        });\n\n        return (\n            <div className={styles.container}>\n                {tracks}\n                {busTracks}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport {AudioEngine} from \"../audio/AudioEngine\";\nimport {TransportView} from \"./audio/TransportView\";\nimport {Mixer} from \"./audio/Mixer\";\n\ninterface DrumMachineProps {\n    engine: AudioEngine\n}\n\nexport class DrumMachine extends React.Component<DrumMachineProps, {}> {\n    public render(): React.ReactNode {\n        return <>\n            <TransportView\n                sendBuses={[...this.props.engine.buses.keys()]}\n                transport={this.props.engine.transport}\n                tracks={[...this.props.engine.tracks.values()]}\n                masterTrack={this.props.engine.masterTrack}\n                sequencer={this.props.engine.sequencer}\n            />\n            <Mixer\n                buses={[...this.props.engine.buses.values()]}\n                tracks={[...this.props.engine.tracks.values()]}\n                audioEngine={this.props.engine}\n            />\n        </>\n    }\n}\n","import React from \"react\";\n\nconst name = process.env.REACT_APP_NAME\nconst version = process.env.REACT_APP_VERSION\n\nexport const Footer = () => {\n    const copyrightYear = () => {\n        const firstYear = 2020;\n        const currentYear = (new Date()).getFullYear()\n\n        return currentYear !== firstYear ? `${firstYear}-${currentYear}` : `${currentYear}`;\n    }\n\n    return (\n        <>\n            <hr/>\n            &copy; {`Arjan Frans ${copyrightYear()} | `}\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/arjanfrans/web-drum-machine\">\n                Source Code\n            </a> | {name} v{version}\n        </>\n    )\n}\n","import {log} from \"./util/console\" // must be the first import\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {AudioEngine} from \"./audio/AudioEngine\";\nimport {CONFIG} from \"./config\";\nimport {DrumMachine} from \"./ui/DrumMachine\";\nimport {Footer} from \"./ui/Footer\";\n\nlog(`Starting app: ${process.env.REACT_APP_NAME}`);\n\ntype AppProps = {\n    engine?: AudioEngine\n}\n\ntype AppState = {\n    engine?: AudioEngine\n}\n\nconst createEngine = async () => {\n    const engine = new AudioEngine(CONFIG);\n\n    await engine.init();\n\n    return engine;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n\n        this.state = {\n            engine: props.engine\n        }\n    }\n    private async start() {\n        this.setState({\n            engine: await createEngine()\n        })\n    }\n\n    public render() {\n        if (!this.state.engine) {\n            return (\n                <button onClick={this.start.bind(this)}>\n                    Click here to start!\n                </button>\n            )\n        }\n\n        return (\n            <>\n                <DrumMachine engine={this.state.engine}/>\n            </>\n        );\n    }\n}\n\n(async () => {\n    ReactDOM.render(\n        <React.StrictMode>\n            <App/>\n            <Footer/>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n})()\n\n"],"sourceRoot":""}